<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutorials By Nick</title>
    <description>I like to learn how computers work and share my knowledge in my newsletter.
</description>
    <link>http://tutorialsbynick.com/</link>
    <atom:link href="http://tutorialsbynick.com/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sat, 02 Sep 2017 09:56:16 -0400</pubDate>
    <lastBuildDate>Sat, 02 Sep 2017 09:56:16 -0400</lastBuildDate>
    <generator>Jekyll v3.5.2</generator>
    
      <item>
        <title>Javascript Animation Basics</title>
        <description>&lt;p&gt;Javascript is a language that allows you to make interactive websites. Websites that host games, are dynamic applications, or do extensive animation or visualization. It’s very versatile to say the least. We will be making a ball bounce around the screen in this tutorial.&lt;/p&gt;

&lt;h1 id=&quot;table-of-contents&quot;&gt;Table of Contents&lt;/h1&gt;
&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#table-of-contents&quot; id=&quot;markdown-toc-table-of-contents&quot;&gt;Table of Contents&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#annoying-pop-ups&quot; id=&quot;markdown-toc-annoying-pop-ups&quot;&gt;Annoying Pop Ups&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#a-blank-canvas&quot; id=&quot;markdown-toc-a-blank-canvas&quot;&gt;A Blank Canvas&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#animating-things&quot; id=&quot;markdown-toc-animating-things&quot;&gt;Animating Things!&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;annoying-pop-ups&quot;&gt;Annoying Pop Ups&lt;/h1&gt;

&lt;p&gt;Open up your favorite code editor (I like to use &lt;a href=&quot;https://code.visualstudio.com/&quot;&gt;Visual Studio Code&lt;/a&gt;). Make a new file and call it &lt;code&gt;something.html&lt;/code&gt;. Put a basic html structure like in &lt;a href=&quot;/basics-of-html-and-css/&quot;&gt;my HTML and CSS Basics tutorial&lt;/a&gt;. It should look similar to this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;lineno&quot;&gt;1 &lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;2 &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;3 &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;4 &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;Wow animation stuffs!&lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;5 &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;6 &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;7 &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This time around we are going to add a new tag, &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt;. Place it inside of the body tag. The &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tag is sort of similar to the &lt;code&gt;&amp;lt;style&amp;gt;&lt;/code&gt; tag. Inside of the &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tag we put our Javascript code that we want to execute on our page.&lt;/p&gt;

&lt;p&gt;Just to make sure it’s working let’s create a little pop up.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;lineno&quot;&gt; 1 &lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 2 &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 3 &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 4 &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;Wow animation stuffs!&lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 5 &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 6 &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 7 &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;alert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Hello!&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 8 &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 9 &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;10 &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;If you reload the page, an annoying pop up box should come up. Yay it works! But why &lt;code&gt;alert()&lt;/code&gt;? What is it and what does it do?&lt;/p&gt;

&lt;p&gt;&lt;code&gt;alert(&quot;Hello!&quot;)&lt;/code&gt; is a function. Functions are blocks of code you can run over and over. They can take some kind of input and give some kind of output but they don’t always. You can tell by how there is a name and two parenthesis right next to it. The name &lt;code&gt;alert&lt;/code&gt; itself was chosen by some of the people who originally created Javascript. They handily included functions that are useful for us. Inside of the parenthesis there is &lt;code&gt;&quot;Hello!&quot;&lt;/code&gt;. This is some input given to the &lt;code&gt;alert&lt;/code&gt; function, and with this input the browser makes the alert box with your text inside of it and shows it to you.&lt;/p&gt;

&lt;h1 id=&quot;a-blank-canvas&quot;&gt;A Blank Canvas&lt;/h1&gt;

&lt;p&gt;Enough of these annoying pop up thingys you say?! Say no more, let’s draw things. For this we will need the &lt;code&gt;&amp;lt;canvas&amp;gt;&lt;/code&gt; tag, which should go before the &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tag and inside the &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; tag. Also, you should give it an id like &lt;code&gt;myBeautifulCanvas&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;lineno&quot;&gt; 1 &lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 2 &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 3 &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 4 &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;Wow animation stuffs!&lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 5 &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 6 &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;canvas&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;myBeautifulCanvas&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 7 &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 8 &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 9 &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;10 &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;To use our beautiful canvas, we have to let the code know where it is. We can do that with the following piece of code:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;myCanvas&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;myBeautifulCanvas&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This is a lot of new information, so let’s go over it. &lt;code&gt;var&lt;/code&gt; stands for the word variable. That line creates a new variable with name &lt;code&gt;myCanvas&lt;/code&gt;. A variable is sort of like a box that you can use to carry around useful pieces of data and use them over and over. You can also change the item inside the box but keep the box name (variable name) for data that changes. After we name it &lt;code&gt;myCanvas&lt;/code&gt;, we have an equal sign and a function. The equal sign means put the piece of data from the right side of the equal sign into the variable box named &lt;code&gt;myCanvas&lt;/code&gt;. The function &lt;code&gt;document.getElementById()&lt;/code&gt; gives us the element that is uniquely named by an id passed to it as input. We use an id because we want to make sure that we are using only one element. In our case we are getting the canvas element so we can draw on it.&lt;/p&gt;

&lt;p&gt;Next, we need to set up the &lt;code&gt;&amp;lt;canvas&amp;gt;&lt;/code&gt; element for drawing. To do this we make another variable, &lt;code&gt;context&lt;/code&gt; and set it equal to a function on the &lt;code&gt;&amp;lt;canvas&amp;gt;&lt;/code&gt; element. The &lt;code&gt;getContext('2d')&lt;/code&gt; function initializes the canvas for drawing in 2d. You can also initialize it by giving &lt;code&gt;getContext()&lt;/code&gt; input like &lt;code&gt;webgl&lt;/code&gt; for 3d drawing, or &lt;code&gt;bitmaprenderer&lt;/code&gt; to draw images.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;myCanvas&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;2d&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;To draw a circle, we’ll need 4 functions: &lt;code&gt;context.beginPath()&lt;/code&gt;, &lt;code&gt;context.arc()&lt;/code&gt;, &lt;code&gt;context.closePath()&lt;/code&gt;, and &lt;code&gt;context.fill()&lt;/code&gt;. I know this is a lot of functions at once, but they’re not too hard. &lt;code&gt;beginPath()&lt;/code&gt; creates the path for drawing. &lt;code&gt;closePath()&lt;/code&gt; ends it. &lt;code&gt;arc()&lt;/code&gt; draws an arc at some (x, y) pixel coordinate from a certain start angle to a certain end angle with a certain radius. In our case that would be &lt;code&gt;0&lt;/code&gt; to &lt;code&gt;2*Math.PI&lt;/code&gt; (&lt;code&gt;Math.PI&lt;/code&gt; is a variable provided by the browser that approximates pi) because we want to draw all the way around the circle not just a slice of it. &lt;code&gt;fill()&lt;/code&gt; draws the path on the canvas and fills it with a color.&lt;/p&gt;

&lt;p&gt;Let’s try and put this all together to draw a circle:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;myCanvas&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;myBeautifulCanvas&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;myCanvas&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;2d&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;beginPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// This is a comment&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// comments aren&amp;#39;t read by the computer and can be used for documentation&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 50, 50 is x, y&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 10 is radius&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 0 is start angle&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 2*Math.PI is end angle&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;arc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;PI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;closePath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fill&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I used comments in the code above to tell you what each of the inputs to the function does. These inputs are usually called arguments by other programmers.&lt;/p&gt;

&lt;h1 id=&quot;animating-things&quot;&gt;Animating Things!&lt;/h1&gt;

&lt;p&gt;You may have heard about how movies are just a series of pictures one after the other so fast that your brain thinks you’re watching something moving. It’s true. We will use the same technique here by drawing our circle, erasing it, drawing it again at a different position again and again at &lt;em&gt;high speeds&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;To do this, we will create our very first function!&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;draw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// yay functions&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Functions in Javascript are made by typing the word &lt;code&gt;function&lt;/code&gt; then the name of said function (draw, in our case). Then some parenthesis and an opening curly bracket and a closing curly bracket. Our code to draw the circle will go inside of the curly brackets that way we can run this function over and over and it will draw our circle over and over.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;draw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;beginPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;arc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;PI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;closePath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fill&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;draw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;So you can see we made a function named &lt;code&gt;draw&lt;/code&gt; and then we ran it one time. Because we want to run it over and over, we’ll need to use another function named &lt;code&gt;requestAnimationFrame()&lt;/code&gt;. This function synchronizes our drawing function with the browsers drawing function that draws all webpages.&lt;/p&gt;

&lt;p&gt;We can run &lt;code&gt;requestAnimationFrame()&lt;/code&gt; at the end of our draw function and give it the name of our draw function as input. That way the browser will know to call our draw function after we drew our previous circle.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;draw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;beginPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;arc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;PI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;closePath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fill&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;requestAnimationFrame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;draw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now we should be drawing millions and billions and bajillions of circles over and over each of them on top of each other resulting in the magnificent effect of a single circle on the screen. Great isn’t it? Okay, let’s get that circle moving. You know that to move the circle, you want it to change the coordinates just a little bit each time the circle is drawn. This is the perfect use for a variable! Let’s make one for the x coordinate and one for the y coordinate and start the position at (0, 0). We have to create the variables outside of the draw function because we don’t want the variables to be created from scratch each draw. We want the coordinates to be updated with a slightly different position each time based on the old one.&lt;/p&gt;

&lt;p&gt;An important fact to note is that canvas coordinate systems are strange. (0,0) is the top left corner of the canvas and (positive max width, positive max height) is the bottom right of the canvas.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;So in this block of code we make new variables &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; and set them both equal to 0. Then we set those variables equal to the previous item in the box (0), with 10 added to it (0 + 10). Now 0 + 10 or 10 is stored inside both &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;So what we will do now is put the &lt;code&gt;x = x + 10&lt;/code&gt; parts inside of the draw function and use the variables &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; as inputs to the &lt;code&gt;arc()&lt;/code&gt; function so that the position of the circle updates with every draw call.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;draw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;beginPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;arc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;PI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;closePath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fill&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;requestAnimationFrame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;draw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;draw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now if you run this code, you should see a bunch of overlapping circles quickly going diagonally across your beautiful canvas. :) We are almost there! Just need to clear the canvas before each draw to make it seem like a video. Luckily for us, there is a handy function called &lt;code&gt;clearRect()&lt;/code&gt; that we can use. It draws a white rectangle from a start point with a width and a height given to it.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;draw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;clearRect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;myCanvas&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;myCanvas&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;beginPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;arc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;PI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;closePath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fill&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;requestAnimationFrame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;draw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;draw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;You should see a circle moving across your screen now. :) Not too bad right? If the canvas is too small for you, add width and height attributes (sizes in pixels) to your canvas element html like so:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;canvas&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;myBeautifulCanvas&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;500&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;500&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;canvas&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;You can also use &lt;code&gt;&amp;lt;canvas&amp;gt;&lt;/code&gt; to draw rectangles, images, and other neat things. With Javascript and canvas, it’s possible to make games in the web browser!&lt;/p&gt;

</description>
        <pubDate>Fri, 01 Sep 2017 00:00:00 -0400</pubDate>
        <link>http://tutorialsbynick.com/javascript-animation-basics/</link>
        <guid isPermaLink="true">http://tutorialsbynick.com/javascript-animation-basics/</guid>
        
        
      </item>
    
      <item>
        <title>Basics of HTML and CSS</title>
        <description>&lt;p&gt;HTML is the language that powers websites. You use HTML to structure the content that shows up on the webpage. CSS is the language that handles styling of the webpage and content layout. We will be making a basic todo list in this tutorial, so lets get started! Please follow along by writing the code yourself and using your browser to open the file. Make sure to refresh the webpage when you’ve saved your code.&lt;/p&gt;

&lt;h1 id=&quot;table-of-contents&quot;&gt;Table of Contents&lt;/h1&gt;
&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#table-of-contents&quot; id=&quot;markdown-toc-table-of-contents&quot;&gt;Table of Contents&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#a-basic-html-page&quot; id=&quot;markdown-toc-a-basic-html-page&quot;&gt;A Basic HTML Page&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#a-basic-todo-list&quot; id=&quot;markdown-toc-a-basic-todo-list&quot;&gt;A Basic Todo List&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#a-prettier-todo-list&quot; id=&quot;markdown-toc-a-prettier-todo-list&quot;&gt;A Prettier Todo List&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;a-basic-html-page&quot;&gt;A Basic HTML Page&lt;/h1&gt;

&lt;p&gt;Open up your favorite code editor (I like to use &lt;a href=&quot;https://code.visualstudio.com/&quot;&gt;Visual Studio Code&lt;/a&gt;). Make a new file and call it &lt;code&gt;something.html&lt;/code&gt;. All html files end in either &lt;code&gt;.html&lt;/code&gt; or &lt;code&gt;.htm&lt;/code&gt;. First we put &lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/code&gt; at the top of the file. This will tell the browser that we are using the latest version of HTML. Next let’s put a html tag in the document.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;lineno&quot;&gt;1 &lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;2 &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;3 &lt;/span&gt;    Stuff inside of the html tag
&lt;span class=&quot;lineno&quot;&gt;4 &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;As you can see, a html element has an opening (&lt;code&gt;&amp;lt;html&amp;gt;&lt;/code&gt;) and closing (&lt;code&gt;&amp;lt;/html&amp;gt;&lt;/code&gt;) tag. Inside of the opening and closing tag are either other tags or content. Usually tags inside of other tags are indented by a tab or 4 spaces to allow for easier code reading.&lt;/p&gt;

&lt;p&gt;The head element stores information that isn’t shown to the webpage reader, but has information for search engines and links to styling resources and the title of the webpage. Let’s add a title to our html file:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;lineno&quot;&gt;1 &lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;2 &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;3 &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;4 &lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;This is the title of my website!&lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;5 &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;6 &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Like a letter webpages have a head and a body. The body is where the content that you see on the webpage is stored.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;lineno&quot;&gt;1 &lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;2 &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;3 &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;4 &lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;This is the title of my website!&lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;5 &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;6 &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;7 &lt;/span&gt;Hello, my amazing readers! You are fantastic!
&lt;span class=&quot;lineno&quot;&gt;8 &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;9 &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h1 id=&quot;a-basic-todo-list&quot;&gt;A Basic Todo List&lt;/h1&gt;

&lt;p&gt;Doesn’t everyone always have too much on their plate? Let’s make a simple todo list to lessen our stresses. In html, the &lt;code&gt;ul&lt;/code&gt; tag creates a bullet list and the &lt;code&gt;ol&lt;/code&gt; tag creates a numbered list. Inside of those tags you use &lt;code&gt;li&lt;/code&gt; tags which contain the text you want to put on your list.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;lineno&quot;&gt; 1 &lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 2 &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 3 &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 4 &lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;This is the title of my website!&lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 5 &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 6 &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 7 &lt;/span&gt;Why do I have so much to do...
&lt;span class=&quot;lineno&quot;&gt; 8 &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;ul&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 9 &lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;Write an article&lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;10 &lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;Write another article&lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;11 &lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;Write 2 more articles&lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;12 &lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;Read a few articles&lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;13 &lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;Write 3 more articles&lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;14 &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;ul&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;15 &lt;/span&gt;The work never ends. :(
&lt;span class=&quot;lineno&quot;&gt;16 &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;17 &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h1 id=&quot;a-prettier-todo-list&quot;&gt;A Prettier Todo List&lt;/h1&gt;

&lt;p&gt;Honestly, my todo list is too plain to look at. Let’s use some CSS to stylize it and make it prettier. CSS is fairly simple. There are selectors which tell the browser what html elements to apply the styles to and properties which can change certain styles of our elements. We will go over some selectors and properties in a bit.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;lineno&quot;&gt;1 &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;li&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;2 &lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;red&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;3 &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;4 &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;this-is-a-class-selector&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;5 &lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;blue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;6 &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;7 &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;this-is-an-id-selector&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;8 &lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;green&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;9 &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;On line 1, we can see the selector is the &lt;code&gt;li&lt;/code&gt; html element. This means that for every &lt;code&gt;li&lt;/code&gt; element in our html the color will be red. On line 4, the selector is for CSS classes.&lt;/p&gt;

&lt;p&gt;A html element like this &lt;code&gt;&amp;lt;li class=&quot;this-is-a-class-selector another-class&quot;&amp;gt;Hi&amp;lt;/li&amp;gt;&lt;/code&gt; will have the styles from &lt;code&gt;this-is-a-class-selector&lt;/code&gt; and &lt;code&gt;another-class&lt;/code&gt; applied to it. But wait, we already changed a color for all &lt;code&gt;li&lt;/code&gt; elements! What happens when we change the color again with a class? I’m glad you asked, dear reader. The later things in your CSS take precedence over the things before it. So &lt;code&gt;li&lt;/code&gt; elements that don’t have a class will be red, but &lt;code&gt;li&lt;/code&gt; elements with a class will be blue because that style is written later in the CSS.&lt;/p&gt;

&lt;p&gt;On line 7, that is an id selector. Only one of those can be applied per element unlike classes. This is how they are applied: &lt;code&gt;&amp;lt;li id=&quot;this-is-an-id-selector&quot;&amp;gt;Hello again&amp;lt;/li&amp;gt;&lt;/code&gt;. Usually you’ll see most web developers using classes everywhere even if there is only one selector needed because it’s easier to add more styles with different classes later.&lt;/p&gt;

&lt;p&gt;Phew, that was a lot of CSS information. Let’s actually color our todo list now. Inside the head tag we’ll create a style tag where we put our CSS code.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;lineno&quot;&gt; 1 &lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 2 &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 3 &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 4 &lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;This is the title of my website!&lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 5 &lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 6 &lt;/span&gt;    &lt;span class=&quot;nt&quot;&gt;li&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 7 &lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;red&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 8 &lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 9 &lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;this-is-a-class-selector&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;10 &lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;blue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;11 &lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;12 &lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;this-is-an-id-selector&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;13 &lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;green&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;14 &lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;15 &lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;16 &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;17 &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;18 &lt;/span&gt;Why do I have so much to do...
&lt;span class=&quot;lineno&quot;&gt;19 &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;ul&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;20 &lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;li&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;this-is-a-class-selector&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;Write an article&lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;21 &lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;li&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;this-is-an-id-selector&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;Write another article&lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;22 &lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;Write 2 more articles&lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;23 &lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;Read a few articles&lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;24 &lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;Write 3 more articles&lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;25 &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;ul&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;26 &lt;/span&gt;The work never ends. :(
&lt;span class=&quot;lineno&quot;&gt;27 &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;28 &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;You did it! You now have a colorized todo list. :) For more cool CSS styles, just search the web for things that you want to do. e.g. css font size. Here are a few interesting ones to get you started:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;background-color&lt;/li&gt;
  &lt;li&gt;font-family&lt;/li&gt;
  &lt;li&gt;font-size&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Thu, 31 Aug 2017 00:00:00 -0400</pubDate>
        <link>http://tutorialsbynick.com/basics-of-html-and-css/</link>
        <guid isPermaLink="true">http://tutorialsbynick.com/basics-of-html-and-css/</guid>
        
        
      </item>
    
      <item>
        <title>How To Install Python on Windows</title>
        <description>&lt;p&gt;This tutorial will teach you how to install the Python programming language on Windows. Python is a great
programming language to learn because it offers many great libraries that can
help you build the programs you want to easily. It also has a multitude of
documentation available for you to utilize when programming complex projects.&lt;/p&gt;

&lt;h1 id=&quot;table-of-contents&quot;&gt;Table of Contents&lt;/h1&gt;
&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#table-of-contents&quot; id=&quot;markdown-toc-table-of-contents&quot;&gt;Table of Contents&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#finding-the-right-download&quot; id=&quot;markdown-toc-finding-the-right-download&quot;&gt;Finding the Right Download&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#installing-python&quot; id=&quot;markdown-toc-installing-python&quot;&gt;Installing Python&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#conclusion&quot; id=&quot;markdown-toc-conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;finding-the-right-download&quot;&gt;Finding the Right Download&lt;/h1&gt;

&lt;p&gt;First, you should go to the &lt;a href=&quot;https://python.org&quot;&gt;Python website&lt;/a&gt;. It should show
up in your URL bar as something like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://tutorialsbynick.com/images/python-installation/python-url.jpg&quot; alt=&quot;Python website url&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Make sure that you see the green lock to the left of the url with the words
&lt;code&gt;Python Software Foundation&lt;/code&gt; because that signifies that this website is
officially sanctioned by the organization that develops Python.&lt;/p&gt;

&lt;p&gt;Hover over the downloads link in the navigation bar, and click on the Windows
link provided.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://tutorialsbynick.com/images/python-installation/hover-downloads.jpg&quot; alt=&quot;Python download link&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once the page has loaded, you should see the following links below:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://tutorialsbynick.com/images/python-installation/select-python3-releases.jpg&quot; alt=&quot;Select python3 releases&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Click the link which has the words &lt;code&gt;Latest Python 3 Release&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This will take you to a page which has the following table:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://tutorialsbynick.com/images/python-installation/download-table.jpg&quot; alt=&quot;Download table&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Select &lt;code&gt;Windows x86-64 executable installer&lt;/code&gt; if you have a 64-bit computer.&lt;/p&gt;

&lt;p&gt;Select &lt;code&gt;Windows x86 executable installer&lt;/code&gt; if you have a 32-bit computer.&lt;/p&gt;

&lt;p&gt;A download dialog should pop up on your screen:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://tutorialsbynick.com/images/python-installation/download-dialog.jpg&quot; alt=&quot;Download dialog&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Click &lt;code&gt;Save File&lt;/code&gt; because you’ll want to run it later to install Python.&lt;/p&gt;

&lt;p&gt;After it has finished downloading, select the download from the dropdown menu in
your browser to start installing Python.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://tutorialsbynick.com/images/python-installation/run-from-downloads.jpg&quot; alt=&quot;Run from downloads&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;installing-python&quot;&gt;Installing Python&lt;/h1&gt;

&lt;p&gt;This screen should come up after running the download:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://tutorialsbynick.com/images/python-installation/first-installation-screen.jpg&quot; alt=&quot;First installation screen&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Be sure to have the checkbox titled, &lt;code&gt;Add Python to PATH&lt;/code&gt;, checked:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://tutorialsbynick.com/images/python-installation/check-python-path.jpg&quot; alt=&quot;Check python path&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now click &lt;code&gt;Install Now&lt;/code&gt; to start the installation.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://tutorialsbynick.com/images/python-installation/select-install-now.jpg&quot; alt=&quot;Install now&quot; /&gt;&lt;/p&gt;

&lt;p&gt;A window may pop up asking whether you want to allow the installation access to
your hard drive. Click yes because you want to install Python.&lt;/p&gt;

&lt;p&gt;The Python installer should show its progress like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://tutorialsbynick.com/images/python-installation/python-installing-window.jpg&quot; alt=&quot;Python installing window&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Congratulations! If you see a window like the one below, your Python installation is finished!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://tutorialsbynick.com/images/python-installation/python-installation-finished.jpg&quot; alt=&quot;Python installation finished&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Click &lt;code&gt;Close&lt;/code&gt; to exit the installer.&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;You now have a powerful programming language available to use on your computer.
It has many libraries that you could use to make games, websites, and
applications – all within the same easy-to-use language. Let me know in the
comments what you’re using Python for!&lt;/p&gt;

</description>
        <pubDate>Wed, 14 Sep 2016 00:00:00 -0400</pubDate>
        <link>http://tutorialsbynick.com/how-to-install-python-on-windows/</link>
        <guid isPermaLink="true">http://tutorialsbynick.com/how-to-install-python-on-windows/</guid>
        
        
      </item>
    
      <item>
        <title>Writing an OS: Baby Steps</title>
        <description>&lt;p&gt;&lt;img src=&quot;http://tutorialsbynick.com/images/babysteps/book.jpg&quot; alt=&quot;Baby Steps&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;(Taken from the excellent movie, &lt;a href=&quot;http://www.imdb.com/title/tt0103241/&quot;&gt;What About Bob?&lt;/a&gt;)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This tutorial is intended to walk you through writing your own &lt;em&gt;very&lt;/em&gt; simple
operating system in assembly. I originally found the basis of this tutorial on the &lt;a href=&quot;http://wiki.osdev.org/Babystep1&quot;&gt;OSDev wiki&lt;/a&gt;, but it didn’t have any explanation to what was going on or why, so I decided to make this tutorial. We’ll go over the basics of the booting process
and what tools you’ll need to operate.&lt;/p&gt;

&lt;p&gt;Most popular operating systems like OSX, Linux, or Windows contain drivers and provide interfaces to the hardware, ensure a certain level of safety and security, keep the processes from fighting each other, and provide essential libraries for programs to use the computer. However, ours won’t be nearly as complicated. :) By the end of this tutorial, you should have an operating system that prints a message to the screen!&lt;/p&gt;

&lt;p&gt;I attempted to explain everything as simple as possible, but if I made any errors
or you’d like to suggest changes to my article, feel free to &lt;a href=&quot;https://github.com/TutorialsByNick/tutorialsbynick/issues/new&quot;&gt;make an issue&lt;/a&gt; on
Github or email me.&lt;/p&gt;

&lt;p&gt;The source code is also available in this &lt;a href=&quot;https://github.com/TutorialsByNick/blog-operating-system&quot;&gt;Github
repository&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&quot;table-of-contents&quot;&gt;Table of Contents&lt;/h1&gt;
&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#table-of-contents&quot; id=&quot;markdown-toc-table-of-contents&quot;&gt;Table of Contents&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#requirements&quot; id=&quot;markdown-toc-requirements&quot;&gt;Requirements&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#the-booting-process&quot; id=&quot;markdown-toc-the-booting-process&quot;&gt;The Booting Process&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#finally-some-code&quot; id=&quot;markdown-toc-finally-some-code&quot;&gt;Finally, Some Code&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#shortening-the-build-process&quot; id=&quot;markdown-toc-shortening-the-build-process&quot;&gt;Shortening the Build Process&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#printing-to-the-screen&quot; id=&quot;markdown-toc-printing-to-the-screen&quot;&gt;Printing to the Screen&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#what-is-a-segment&quot; id=&quot;markdown-toc-what-is-a-segment&quot;&gt;What is a segment?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#back-to-our-code&quot; id=&quot;markdown-toc-back-to-our-code&quot;&gt;Back to Our Code&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#exercises&quot; id=&quot;markdown-toc-exercises&quot;&gt;Exercises&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#further-reading&quot; id=&quot;markdown-toc-further-reading&quot;&gt;Further Reading&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;requirements&quot;&gt;Requirements&lt;/h1&gt;

&lt;p&gt;This tutorial assumes that you already have a Debian-based Linux installation. However, the main part that shouldn’t change much between other Linux distributions except for the method of installing. If you don’t
you can still follow along by &lt;a href=&quot;/how-to-install-ubuntu-in-a-virtual-machine-on-windows/&quot;&gt;installing Ubuntu in a virtual machine&lt;/a&gt; or by
using &lt;a href=&quot;http://tutorialsbynick.com/writing-an-os-baby-steps/#comment-2728097897&quot;&gt;Michali Sarris’s comment&lt;/a&gt; to use Docker Toolbox.&lt;/p&gt;

&lt;p&gt;You’ll need &lt;code&gt;nasm&lt;/code&gt;, &lt;code&gt;build-essential&lt;/code&gt;, and &lt;code&gt;qemu&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-console&quot; data-lang=&quot;console&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; sudo apt-get install nasm build-essential qemu&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;nasm&lt;/code&gt; is an assembler, which translates assembly code into binary code that the
computer can directly execute&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;build-essential&lt;/code&gt; installs many programs and compilers required for building other
programs. We will use &lt;code&gt;make&lt;/code&gt; mostly to automate building the operating system
and running it&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;qemu&lt;/code&gt; is an easy to use virtual machine that emulates a computer, so that we
don’t have to accidentally screw up our computer or reboot constantly to
develop our operating system. We can test the code out directly on the virtual
machine that the qemu software provides&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;the-booting-process&quot;&gt;The Booting Process&lt;/h1&gt;

&lt;p&gt;When a computer is first powered on, it starts up in a processor mode called Real Mode. This mode is a legacy left over from when we used 16-bit computers and forces the processor to use 16-bits while it’s in that mode.
A byte is 8 bits, which are numbers that can be either 1 or 0 and are encoded as binary numbers. For example: 10010101 is a byte. Computers use bits and bytes to deal with instructions and data because that format is analogous to off and on. A computer is basically an incredibly dense electronics circuit, so using binary to program it works out well to map most directly to the hardware.
This mode can’t access much RAM memory because the smaller amount of bits means a
smaller amount of available numbers for addresses to use when accessing the ram.
Most computers today which are 32-bit or 64-bit can access at least 4GB of RAM memory, while most 16-bit
computers accessed 1MB worth of RAM.
For our purposes, Real Mode is fine because it’s the only mode which allows us to use BIOS functions and we’re going to use relatively simple code.&lt;/p&gt;

&lt;p&gt;After the computer powers on, it loads the BIOS (Basic Input Output System) from a special permanent flash memory chip on the motherboard in Real Mode. the BIOS functions as a rudimentary library that can access and modify hardware on the computer. The BIOS also performs a POST (Power On Self Test) check to make sure that all systems are running fine. It then locates the MBR (Master Boot Record, also known as boot sector) which is 512 bytes long and always found at the very start of the bootable media like a hard drive, floppy, dvd, or usb drive. After finding it, the BIOS executes the code in the MBR in Real Mode.&lt;/p&gt;

&lt;p&gt;The MBR has many functions located inside it. It can hold the locations and information of different partitions for the hard drive and it also holds the code that the computer executes. Because the MBR is only 512 bytes and most operating systems don’t fit into that size (Linux and Windows contain millions of lines of code), many operating systems use a bootloader that can load the operating system kernal code from different filesystems and execute it, while finishing the set up of the computer.&lt;/p&gt;

&lt;p&gt;Our little operating system kernel, however, will fit inside the 512 bytes, so it doesn’t need a bootloader to load more code from the disk.&lt;/p&gt;

&lt;p&gt;What I’ll do is show you some code and we’ll deconstruct it bit by bit. Don’t worry if you don’t understand everything; this is meant to just give you some knowledge about how computers work. I’ll also provide the commands and information so that you can follow along on your own computer.&lt;/p&gt;

&lt;h1 id=&quot;finally-some-code&quot;&gt;Finally, Some Code&lt;/h1&gt;

&lt;p&gt;Type this snippet into your favorite text editor as &lt;code&gt;boot.asm&lt;/code&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-nasm&quot; data-lang=&quot;nasm&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;lineno&quot;&gt; 1 &lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;; boot.asm&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 2 &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;hang:&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 3 &lt;/span&gt;    &lt;span class=&quot;nf&quot;&gt;jmp&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hang&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 4 &lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 5 &lt;/span&gt;    &lt;span class=&quot;kd&quot;&gt;times&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;510&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;$$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;db&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 6 &lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 7 &lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;; This is a comment&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 8 &lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 9 &lt;/span&gt;    &lt;span class=&quot;kd&quot;&gt;db&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x55&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;10 &lt;/span&gt;    &lt;span class=&quot;kd&quot;&gt;db&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xAA&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;hang:&lt;/code&gt; is just a named marker in the code&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;jmp hang&lt;/code&gt; means jump to the hang marker
    &lt;ul&gt;
      &lt;li&gt;This makes an infinte loop&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code&gt;times 510-($-$$) db 0&lt;/code&gt; is NASM syntax for fill the rest of the remaining bytes up with zeroes
    &lt;ul&gt;
      &lt;li&gt;&lt;code&gt;$&lt;/code&gt; means start of the current line&lt;/li&gt;
      &lt;li&gt;&lt;code&gt;$$&lt;/code&gt; references the start of the file/section&lt;/li&gt;
      &lt;li&gt;&lt;code&gt;($-$$)&lt;/code&gt; means subtract the current location from the beginning of the file&lt;/li&gt;
      &lt;li&gt;We don’t use &lt;code&gt;512&lt;/code&gt; to fill up the rest of the MBR’s 512 bytes because the two &lt;code&gt;db&lt;/code&gt; commands afterward store two bytes at the end&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Anything that follows a &lt;code&gt;;&lt;/code&gt; is a comment and is disregarded by the assembler
when assembling the source code file&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;0x55&lt;/code&gt; and &lt;code&gt;0xAA&lt;/code&gt; are ‘magic bytes’ that tell the BIOS, “Yes, this is a executable MBR”&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As you can see, the assembly code is generally executed sequentially except for parts where instructions jump to other pieces of code.&lt;/p&gt;

&lt;p&gt;Enter this into the command line to assemble the file into a binary file that the computer can actually execute:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-console&quot; data-lang=&quot;console&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; nasm -f bin boot.asm -o boot.bin&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;-f bin&lt;/code&gt; ensures that nasm assembles it into the binary format instead of something like elf which is used for general purpose programs in Linux&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;boot.asm&lt;/code&gt; is the source code assembly file that nasm is trying to assemble&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;boot.bin&lt;/code&gt; is the output file name&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Then we start qemu with this file:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-console&quot; data-lang=&quot;console&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; qemu-system-x86_64 boot.bin&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;qemu-system-x86_64&lt;/code&gt; is used because we want to use the version of qemu that provides a 64-bit computer&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;boot.bin&lt;/code&gt; tells qemu to use boot.bin as bootable media&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You should see this screen when qemu starts up, if your program was successful.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://tutorialsbynick.com/images/babysteps/qemu-step-one.png&quot; alt=&quot;Qemu Step One&quot; /&gt;&lt;/p&gt;

&lt;p&gt;So, what this program does is make the computer go into an infinite loop and hang. Not too bad, right?&lt;/p&gt;

&lt;h1 id=&quot;shortening-the-build-process&quot;&gt;Shortening the Build Process&lt;/h1&gt;

&lt;p&gt;That was a lot of commands you typed in the command line earlier just to get your operating system to run. Let’s make it shorter.&lt;/p&gt;

&lt;p&gt;We’ll do this with &lt;code&gt;make&lt;/code&gt;, a program that is for setting up build toolchains for almost anytype of compilation.&lt;/p&gt;

&lt;p&gt;First, let’s make a file named &lt;code&gt;Makefile&lt;/code&gt; and put this into it:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-make&quot; data-lang=&quot;make&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;lineno&quot;&gt;1 &lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;boot.bin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;boot&lt;/span&gt;.&lt;span class=&quot;n&quot;&gt;asm&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;2 &lt;/span&gt;	nasm -f bin boot.asm -o boot.bin
&lt;span class=&quot;lineno&quot;&gt;3 &lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;4 &lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;qemu&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;boot&lt;/span&gt;.&lt;span class=&quot;n&quot;&gt;bin&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;5 &lt;/span&gt;	qemu-system-x86_64 boot.bin
&lt;span class=&quot;lineno&quot;&gt;6 &lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;7 &lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;clean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;8 &lt;/span&gt;	rm *.bin&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The values before the colons are names for the list of commands that come afterwards. This way you can type &lt;code&gt;make clean&lt;/code&gt; and &lt;code&gt;make&lt;/code&gt; will execute &lt;code&gt;rm *.bin&lt;/code&gt; for you, which removes all of the assembled files.&lt;/p&gt;

&lt;p&gt;The values that come after the colon are dependencies. So when you type &lt;code&gt;make qemu&lt;/code&gt;, &lt;code&gt;make&lt;/code&gt; will execute &lt;code&gt;boot.bin&lt;/code&gt;’s commands (&lt;code&gt;nasm -f bin boot.asm -o boot.bin&lt;/code&gt;) before it executes &lt;code&gt;qemu-system-x86_64 boot.bin&lt;/code&gt;.&lt;/p&gt;

&lt;h1 id=&quot;printing-to-the-screen&quot;&gt;Printing to the Screen&lt;/h1&gt;

&lt;p&gt;Change your &lt;code&gt;boot.asm&lt;/code&gt; assembly file, so that it looks like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-nasm&quot; data-lang=&quot;nasm&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;lineno&quot;&gt; 1 &lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;; boot.asm&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 2 &lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x07c0&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 3 &lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ax&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 4 &lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 5 &lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ah&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x0&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 6 &lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;al&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x3&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 7 &lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x10&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 8 &lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 9 &lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;si&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;msg&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;10 &lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ah&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x0E&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;11 &lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;12 &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;print_character_loop:&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;13 &lt;/span&gt;    &lt;span class=&quot;nf&quot;&gt;lodsb&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;14 &lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;15 &lt;/span&gt;    &lt;span class=&quot;nf&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;al&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;al&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;16 &lt;/span&gt;    &lt;span class=&quot;nf&quot;&gt;jz&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hang&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;17 &lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;18 &lt;/span&gt;    &lt;span class=&quot;nf&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x10&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;19 &lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;20 &lt;/span&gt;    &lt;span class=&quot;nf&quot;&gt;jmp&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;print_character_loop&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;21 &lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;22 &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;msg:&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;23 &lt;/span&gt;    &lt;span class=&quot;kd&quot;&gt;db&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;Hello, World!&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;13&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;24 &lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;25 &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;hang:&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;26 &lt;/span&gt;    &lt;span class=&quot;nf&quot;&gt;jmp&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hang&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;27 &lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;28 &lt;/span&gt;    &lt;span class=&quot;kd&quot;&gt;times&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;510&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;$$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;db&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;29 &lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;30 &lt;/span&gt;    &lt;span class=&quot;kd&quot;&gt;db&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x55&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;31 &lt;/span&gt;    &lt;span class=&quot;kd&quot;&gt;db&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xAA&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now use &lt;code&gt;make clean&lt;/code&gt; and &lt;code&gt;make qemu&lt;/code&gt; to clean, assemble, and run your operating
system.&lt;/p&gt;

&lt;p&gt;I know this looks daunting! We’ll go through it line by line though.&lt;/p&gt;

&lt;p&gt;I’ve separated the code by chunks that correspond with the surrounding
instructions. We’ll go over each chunk and the instructions used, so
that we can figure out how the operating system goes about printing to the screen.&lt;/p&gt;

&lt;p&gt;If you look at some of these instructions, they have certain pieces information behind them. These are called operands. In NASM syntax, the right operand is the source operand and the left one is the destination operand. The letter operands refer to registers in the CPU, which are special places that hold bits of information the computer can operate on.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;mov&lt;/code&gt; is an instruction that moves data around. It can move bytes from
  register to register and from locations in the code to registers.&lt;/p&gt;

&lt;p&gt;Let’s use this knowledge to figure out our first chunk:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-nasm&quot; data-lang=&quot;nasm&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;lineno&quot;&gt;1 &lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x07c0&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;2 &lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ax&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In the first line, we move the value &lt;code&gt;0x07c0&lt;/code&gt; into the register &lt;code&gt;ax&lt;/code&gt;. &lt;code&gt;0x07c0&lt;/code&gt; is
a hex value, which is a different number format and more convenient for assembly programmers to use than
raw binary numbers of &lt;code&gt;1&lt;/code&gt;s and &lt;code&gt;0&lt;/code&gt;s.&lt;/p&gt;

&lt;p&gt;Then we copy the value from register &lt;code&gt;ax&lt;/code&gt; to register &lt;code&gt;ds&lt;/code&gt;. You might ask,
“Nick, why don’t you just copy &lt;code&gt;0x07c0&lt;/code&gt; directly into register &lt;code&gt;ds&lt;/code&gt;?” Well,
&lt;code&gt;ds&lt;/code&gt; is a very special register. It stands for data segment, and for some
reason known only to Intel developers, it can only have values transfered to it
from other general purpose registers.&lt;/p&gt;

&lt;h1 id=&quot;what-is-a-segment&quot;&gt;What is a segment?&lt;/h1&gt;

&lt;p&gt;Segmentation is a special feature of Real Mode, which Intel made to keep their
16-bit processor, and allow users to be able to access more memory. Traditionally when a computer is 16-bit, only 16-bits are used in the addressing
lines, which call data storage devices with an addresses (in binary) to get certain values stored
at the address in the storage device. Because computers use binary, a 16-bit addressing scheme would mean that there are only 2^16 available slots in which to store a byte. This equates to 64KB of RAM memory. Those crafty Intel developers
implemented segementation to allow the computer to access 20 bits worth of
addressing space which is 2^20 addresses or 1MB worth of memory.&lt;/p&gt;

&lt;p&gt;However, this comes at a cost of using the segmentation
feature. To keep 16-bit compatibility, the processor has to use two registers to
store the &lt;em&gt;segment&lt;/em&gt; and the &lt;em&gt;offset&lt;/em&gt;. The register that holds the segment is
multiplied by &lt;code&gt;0x10&lt;/code&gt; (16 in the decimal format, which is what we use to count), to add another zero to the end of the hex number. Multiplying by &lt;code&gt;0x10&lt;/code&gt; translates to adding four zeros to the end of the number in binary. This means that the 16 bit number is now 20 bits!
The offset is then added to the segment address to get the actual location.
So, when the offset is added to the segment, the address can change those four zero bits at the end to any number to access all the addresses in a 20-bit address space.&lt;/p&gt;

&lt;p&gt;A helpful way to visualize this by dividing 1MB or 1024KB by 16. This gives us 64KB and shows us that with segements, we can set the segement to any address in the processor to access the RAM in 64KB blocks with the offset being able to access any address inside those blocks of 64KB.&lt;/p&gt;

&lt;p&gt;A segmented address is generally referred to in this format
&lt;code&gt;segment:offset&lt;/code&gt;.&lt;/p&gt;

&lt;h1 id=&quot;back-to-our-code&quot;&gt;Back to Our Code&lt;/h1&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-nasm&quot; data-lang=&quot;nasm&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;lineno&quot;&gt;1 &lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x07c0&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;2 &lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ax&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now you should see that this chunk of code loads &lt;code&gt;0x07c0&lt;/code&gt; into register
&lt;code&gt;ds&lt;/code&gt;, or data segment, for segment addressing. But, why would we need this?
Some BIOS functions require the location of the code stored into the &lt;code&gt;ds&lt;/code&gt; register to access it later. The code is located at &lt;code&gt;0x07c0:0x0000&lt;/code&gt; always because that’s where the BIOS loads the MBR every time.&lt;/p&gt;

&lt;p&gt;Here’s another chunk:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-nasm&quot; data-lang=&quot;nasm&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;lineno&quot;&gt;1 &lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ah&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x0&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;2 &lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;al&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x3&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;3 &lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x10&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Here we encounter &lt;code&gt;int&lt;/code&gt;, another new instruction. It stands for interrupt
and it interrupts the CPU and calls a certain piece of
code referred to as an interrupt handler. Usually that interrupt handler uses pieces of code in registers to do 
operations like taking the character in a register and printing it to the screen. In our case, the interrupts are already mapped to functions that the BIOS
has setup for us earlier.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;int&lt;/code&gt; instructions only take one operand and that refers to the interrupt
number. &lt;code&gt;0x10&lt;/code&gt; is the BIOS interrupt that manages video services like writing
characters to the screen, clearing it, setting the video mode and size, among
other functions depending on the value stored in &lt;code&gt;ah&lt;/code&gt;. The numbers that affect
operation of the BIOS functions are usually
just chosen without rhyme or reason, so don’t be afraid to look up information
about the BIOS interrupt you’re using online.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;0x0&lt;/code&gt; in register &lt;code&gt;ah&lt;/code&gt; refers to setting the video mode and size.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;0x3&lt;/code&gt; in register &lt;code&gt;al&lt;/code&gt; tells &lt;code&gt;int 0x10&lt;/code&gt; that the video size should be 80 characters by 25
characters.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These lines get us set up for the character printing loop:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-nasm&quot; data-lang=&quot;nasm&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;lineno&quot;&gt;1 &lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;si&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;msg&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;2 &lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ah&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x0E&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In the first line, we move the pointer to the address of our message we want to print into the
&lt;code&gt;si&lt;/code&gt; register. We use &lt;code&gt;si&lt;/code&gt; because the &lt;code&gt;lodsb&lt;/code&gt; instruction uses the
segemented address &lt;code&gt;ds:si&lt;/code&gt; to load a byte from that location.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;mov ah, 0x0E&lt;/code&gt; uses the &lt;code&gt;ah&lt;/code&gt; register again. &lt;code&gt;0x0E&lt;/code&gt; in the register &lt;code&gt;ah&lt;/code&gt; lets us
use the &lt;code&gt;0x10&lt;/code&gt; interrupt for printing characters to the screen.
This is referred to as teletype output because it emulates the
functionality of a teletypewriter, which is similar to how a typewriter
operates, but able to send the text to a computer or printer.&lt;/p&gt;

&lt;p&gt;Finally, we’re at the part where we actually print
characters to the screen:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-nasm&quot; data-lang=&quot;nasm&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;lineno&quot;&gt;1 &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;print_character_loop:&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;2 &lt;/span&gt;    &lt;span class=&quot;nf&quot;&gt;lodsb&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;3 &lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;4 &lt;/span&gt;    &lt;span class=&quot;nf&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;al&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;al&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;5 &lt;/span&gt;    &lt;span class=&quot;nf&quot;&gt;jz&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hang&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;6 &lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;7 &lt;/span&gt;    &lt;span class=&quot;nf&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x10&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;8 &lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;9 &lt;/span&gt;    &lt;span class=&quot;nf&quot;&gt;jmp&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;print_character_loop&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The &lt;code&gt;lodsb&lt;/code&gt; instruction loads a byte into register &lt;code&gt;al&lt;/code&gt; from the segmented address &lt;code&gt;ds:si&lt;/code&gt; and moves the &lt;code&gt;si&lt;/code&gt;
register onto the next byte. We want to load bytes from the &lt;code&gt;msg:&lt;/code&gt;
location because that’s where our characters for the message we want to
print are stored. Conveniently
enough, the ASCII standard (American Standard Code for Information Interchange), gives us a standardized list of numbers that correspond English letters and punctuation.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;or al, al&lt;/code&gt; performs an &lt;code&gt;or&lt;/code&gt; of the &lt;code&gt;al&lt;/code&gt; register against itself. An OR
instruction compares each bit of the first operand against the
corresponding bit of the other operand. Then if either of the bits are 1, the
destination operand’s bit in that location is changed to 1.&lt;/p&gt;

&lt;p&gt;So if we were comparing &lt;code&gt;101&lt;/code&gt; and &lt;code&gt;010&lt;/code&gt;, we would look at the first bits &lt;code&gt;1&lt;/code&gt; and &lt;code&gt;0&lt;/code&gt;.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Since one of the bits is one, The first bit is kept as 1 in the destination
operand.&lt;/li&gt;
  &lt;li&gt;Then we look at the second bits, &lt;code&gt;0&lt;/code&gt; and &lt;code&gt;1&lt;/code&gt;. There’s another 1, so
we change the second bit of the destination operand to &lt;code&gt;1&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Finally, we
compare &lt;code&gt;1&lt;/code&gt; and &lt;code&gt;0&lt;/code&gt; from the third bits and see that there is a one, so we
change the third bit also to &lt;code&gt;1&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Our final destination operand is &lt;code&gt;111&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The string terminates with a NULL character, which is a zero byte in binary
under the ASCII standard. A &lt;code&gt;0&lt;/code&gt; compared against a &lt;code&gt;0&lt;/code&gt; would be a zero.
So we use the &lt;code&gt;or&lt;/code&gt; instruction to check if the string has ended.&lt;/p&gt;

&lt;p&gt;You may have noticed that we use the &lt;code&gt;al&lt;/code&gt; register even after we “modified” it
with the &lt;code&gt;or&lt;/code&gt; instruction. This works because when bits the bits being &lt;code&gt;or&lt;/code&gt;‘d
are the same, the result that is stored in the first operand is also the same.
So &lt;code&gt;or al, al&lt;/code&gt; is equivalent to just setting the zero flag if the byte in the &lt;code&gt;al&lt;/code&gt; register is zero.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-nasm&quot; data-lang=&quot;nasm&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;lineno&quot;&gt;1 &lt;/span&gt;    &lt;span class=&quot;nf&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;al&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;al&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;2 &lt;/span&gt;    &lt;span class=&quot;nf&quot;&gt;jz&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hang&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;So, why are these two instructions together?&lt;/p&gt;

&lt;p&gt;Well, there’s a neat thing that the processor does. If the return value from
an operation is &lt;code&gt;0&lt;/code&gt;, the processor will set the zero flag. And, if the zero
flag is set, the &lt;code&gt;jz&lt;/code&gt; instruction executes. &lt;code&gt;jz&lt;/code&gt; stands for jump if zero. So if
the string has ended, the processor will jump to the operand, which is &lt;code&gt;hang:&lt;/code&gt;’s
location to hang the processor instead of looking for more characters that
aren’t there in the string.&lt;/p&gt;

&lt;p&gt;Now, we’re finally at the last parts of the loop:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-nasm&quot; data-lang=&quot;nasm&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;lineno&quot;&gt;1 &lt;/span&gt;     &lt;span class=&quot;nf&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x10&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;2 &lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt;3 &lt;/span&gt;     &lt;span class=&quot;nf&quot;&gt;jmp&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;print_character_loop&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;If you remember from earlier, &lt;code&gt;0x0E&lt;/code&gt; is in the &lt;code&gt;ah&lt;/code&gt; register. This means that we
can use &lt;code&gt;int 0x10&lt;/code&gt; for printing characters to the screen that are stored in
&lt;code&gt;al&lt;/code&gt;.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;int 0x10&lt;/code&gt; prints the character to the screen&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;jmp print_character_loop&lt;/code&gt; jumps to the start of the loop to print another
character if the string has not ended&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In summary, the loop:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Loads a character and moves the address to the next character&lt;/li&gt;
  &lt;li&gt;Checks if the character is zero and if it is, makes the processor hang&lt;/li&gt;
  &lt;li&gt;If the character isn’t zero, it prints the character&lt;/li&gt;
  &lt;li&gt;And goes to the start of the loop&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;We’ve just got the final chunk left:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-nasm&quot; data-lang=&quot;nasm&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;lineno&quot;&gt;1 &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;msg:&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;2 &lt;/span&gt;    &lt;span class=&quot;kd&quot;&gt;db&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;Hello, World!&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;13&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The &lt;code&gt;db&lt;/code&gt; command says store these values at the &lt;code&gt;msg:&lt;/code&gt; address. What the comma
means is also store these decimal numbers as bytes too.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;13&lt;/code&gt; translates to carriage return or &lt;code&gt;\r&lt;/code&gt; in ASCII. This moves our cursor to the
start of the line&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;10&lt;/code&gt; translates to line feed or &lt;code&gt;\n&lt;/code&gt; in ASCII. This moves our cursor to
the next line&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;0&lt;/code&gt; tells our program that this is the end of the string&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;(Thanks @beernuts in the comments for the correction!)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Both &lt;code&gt;\n&lt;/code&gt; and &lt;code&gt;\r&lt;/code&gt; are legacy values left over from teletypewriters that we
still use today.&lt;/p&gt;

&lt;p&gt;This operating system we made wasn’t &lt;em&gt;that&lt;/em&gt; terrible when we broke it up, right?
Programming an OS is not something to be taken lightly (we haven’t even gotten
to the hard parts yet :D) as you can see. Eventually we’d be able to use a higher level language like C or Rust, but that’s for another tutorial. I’ll leave some exercies and readings for you if
you’d like to learn more.&lt;/p&gt;

&lt;h1 id=&quot;exercises&quot;&gt;Exercises&lt;/h1&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Print something else to the screen&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Add two numbers together&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Sum up the numbers from 1-100 and print the solution to the screen&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Print the contents of some memory address&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Try and read something from the disk using the BIOS&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Get keypresses from the BIOS&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;further-reading&quot;&gt;Further Reading&lt;/h1&gt;

&lt;p&gt;&lt;em&gt;Useful Information for Extending Our Operating System&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.tutorialspoint.com/assembly_programming/assembly_registers.htm&quot;&gt;Assembly
Registers&lt;/a&gt; - A useful and easy tutorial for learning more about registers used in the processor&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.cs.virginia.edu/~evans/cs216/guides/x86.html&quot;&gt;Guide to x86
Assembly&lt;/a&gt; - More essential information for continuing this operating system in assembly&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://wiki.osdev.org/Bare_Bones&quot;&gt;Bare Bones - OSDev Wiki&lt;/a&gt; - This goes over
using C or C++ to make your operating system kernel and boot it under an
already made bootloader like GRUB, but like the article title says, this is not a hand-holding tutorial&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://wiki.osdev.org/Category:Babystep&quot;&gt;Category:Babystep - OSDev Wiki&lt;/a&gt; -
The first two steps along with many other tutorials are what I based this
tutorial on&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://mrbook.org/blog/tutorials/make/&quot;&gt;Makefiles - Mrbook’s Stuff&lt;/a&gt; is a
great example tutorial on how to use &lt;code&gt;Makefiles&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/BIOS_interrupt_call&quot;&gt;BIOS interrupt call -
Wikipedia&lt;/a&gt; - A relatively good list on BIOS interrupts you can use&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Different Operating Systems&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://os.phil-opp.com/multiboot-kernel.html&quot;&gt;A minimal x86 kernel - Writing an OS in
Rust&lt;/a&gt; - These tutorials are excellent and very high quality, but in my opinion assume you have a certain amount of knowledge&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://mikeos.sourceforge.net/&quot;&gt;MikeOS - simple x86 assembly langauge operating
system&lt;/a&gt; - “MikeOS is an operating system for x86 PCs, written in assembly language. It is a learning tool to show how simple 16-bit, real-mode OSes work, with well-commented code and extensive documentation.”&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;More OS Theory&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://duartes.org/gustavo/blog/post/memory-translation-and-segmentation/&quot;&gt;Memory Translation and Segmentation - Gustavo
Duarte&lt;/a&gt; - Goes into greater depth about segementation&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://duartes.org/gustavo/blog/post/kernel-boot-process/&quot;&gt;The Kernel Boot Process - Gustavo
Duarte&lt;/a&gt; - If you want to look a little into how the Linux kernel boots, or any operating system kernel, really, this is for you&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://duartes.org/gustavo/blog/post/how-computers-boot-up/&quot;&gt;How Computers Boot Up - Gustavo
Duarte&lt;/a&gt; - More indepth information about how computer boot&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.dewassoc.com/kbase/hard_drives/master_boot_record.htm&quot;&gt;The Master Boot Record (MBR) and What it Does&lt;/a&gt; - This tutorial goes into greater depth on the MBR and what the computer does with it&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikibooks.org/wiki/X86_Assembly/Bootloaders&quot;&gt;X86
Assembly/Bootloaders&lt;/a&gt; -
This is a good theory tutorial on how bootloaders work&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Wed, 08 Jun 2016 00:00:00 -0400</pubDate>
        <link>http://tutorialsbynick.com/writing-an-os-baby-steps/</link>
        <guid isPermaLink="true">http://tutorialsbynick.com/writing-an-os-baby-steps/</guid>
        
        
      </item>
    
      <item>
        <title>How To Install Ubuntu in a Virtual Machine on Windows</title>
        <description>&lt;p&gt;This tutorial will teach you how to install Ubuntu Linux in a virtual machine on Windows. This is a good way to start setting up a programming development environment because many developer tools and programs are hard to install on Windows or only run on a Linux like Ubuntu. VirtualBox is a program that emulates a computer, so that you can install different operating systems onto the virtual computer. Ubuntu is a Linux distribution that is easy to use and configure which makes it ideal for a beginner to use. When you combine these two technologies together, you get an accessible way to develop programs on Windows without the hassle of downloading and installing Linux on your real non-virtualized computer.&lt;/p&gt;

&lt;h1 id=&quot;table-of-contents&quot;&gt;Table of Contents&lt;/h1&gt;
&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#table-of-contents&quot; id=&quot;markdown-toc-table-of-contents&quot;&gt;Table of Contents&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#downloading-virtualbox&quot; id=&quot;markdown-toc-downloading-virtualbox&quot;&gt;Downloading VirtualBox&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#installing-virtualbox&quot; id=&quot;markdown-toc-installing-virtualbox&quot;&gt;Installing VirtualBox&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#downloading-ubuntu&quot; id=&quot;markdown-toc-downloading-ubuntu&quot;&gt;Downloading Ubuntu&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#running-virtualbox&quot; id=&quot;markdown-toc-running-virtualbox&quot;&gt;Running Virtualbox&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#installing-ubuntu&quot; id=&quot;markdown-toc-installing-ubuntu&quot;&gt;Installing Ubuntu&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#setting-up-the-virtual-machine-to-handle-server-capabilities&quot; id=&quot;markdown-toc-setting-up-the-virtual-machine-to-handle-server-capabilities&quot;&gt;Setting up the virtual machine to handle server capabilities&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#conclusion&quot; id=&quot;markdown-toc-conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;downloading-virtualbox&quot;&gt;Downloading VirtualBox&lt;/h1&gt;

&lt;p&gt;Go to &lt;a href=&quot;https://www.virtualbox.org/wiki/Downloads&quot;&gt;Downloads - Oracle VM VirtualBox&lt;/a&gt; to download the virtualization program.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://tutorialsbynick.com/images/virtualbox-download-page.jpg&quot; alt=&quot;VirtualBox Download Page&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Select the download link for Windows hosts because the computer that is “hosting” the emulation is a Windows machine.&lt;/p&gt;

&lt;h1 id=&quot;installing-virtualbox&quot;&gt;Installing VirtualBox&lt;/h1&gt;

&lt;p&gt;Just click &lt;code&gt;Next&lt;/code&gt; and go through the installation with the default options.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://tutorialsbynick.com/images/virtualbox-installation-first-step.jpg&quot; alt=&quot;VirtualBox Installation First Step&quot; /&gt;&lt;/p&gt;

&lt;p&gt;A &lt;code&gt;Warning: Network Interfaces&lt;/code&gt; dialogue may appear, but don’t worry – just proceed with the installation. All this means is that VirtualBox is going to install drivers, so that the virtual computer can access the internet by connecting to the your real non-virtualized computer’s internet.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://tutorialsbynick.com/images/virtualbox-network-interfaces-warning.jpg&quot; alt=&quot;VirtualBox Network Interfaces Warning&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Another dialogue may pop up titled “Windows Security” asking whether or not you would like to install this device software. Proceed with the installation because this is also part of the driver installation process.&lt;/p&gt;

&lt;h1 id=&quot;downloading-ubuntu&quot;&gt;Downloading Ubuntu&lt;/h1&gt;

&lt;p&gt;Go to &lt;a href=&quot;http://www.ubuntu.com/download/desktop&quot;&gt;Download Ubuntu Desktop&lt;/a&gt; and click the &lt;code&gt;Download&lt;/code&gt; button on the right to download the desktop version of Ubuntu (There are other versions to accommodate use cases like servers and phones).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://tutorialsbynick.com/images/download-ubuntu-page.jpg&quot; alt=&quot;Ubuntu Download Page&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Unless you would like to donate, you can skip the donation&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://tutorialsbynick.com/images/skip-donation.jpg&quot; alt=&quot;Skip Donation&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;running-virtualbox&quot;&gt;Running Virtualbox&lt;/h1&gt;

&lt;p&gt;Open VirtualBox and select the &lt;code&gt;New&lt;/code&gt; button.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://tutorialsbynick.com/images/after-virtualbox-install.jpg&quot; alt=&quot;VirtualBox Program&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Choose these values and title the virtual machine what you want.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://tutorialsbynick.com/images/virtualbox-ubuntu-naming.jpg&quot; alt=&quot;VirtualBox Naming&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Depending on how much ram your computer has, you want to select as much as possible for the virtual machine, but not more than half the available ram. I have 8GB of ram on my computer, so I don’t have to worry that much about how much ram I select. A user with 2GB of ram might want to select 512MB in order to keep their physical computer running fairly smoothly while operating the virtual machine.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://tutorialsbynick.com/images/virtualbox-ram-size.jpg&quot; alt=&quot;VirtualBox Ram Size&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I would keep the default values for this, but maybe increase the hard drive size if possible. VirtualBox creates a virtual hard drive for the virtual machine to keep the files separated from each other. The virtual machine can’t see your personal files with this setup.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://tutorialsbynick.com/images/virtualbox-hard-drive-size.jpg&quot; alt=&quot;VirtualBox Hard Drive Size&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Keep the default option here and click &lt;code&gt;Next&lt;/code&gt; – these are just different virtual hard drive formats to choose from.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://tutorialsbynick.com/images/virtualbox-hard-drive-type.jpg&quot; alt=&quot;VirtualBox Hard Drive Type&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I generally prefer the default option because it allows me to save space on my physical hard drive, but you can choose the other option if you’d like the virtual hard drive to stay a fixed size.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://tutorialsbynick.com/images/virtualbox-hard-drive-allocation.JPG&quot; alt=&quot;VirtualBox Hard Drive Allocation&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You can change the location and size here if you want, but I like to keep it default.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://tutorialsbynick.com/images/virtualbox-hard-drive-location.jpg&quot; alt=&quot;VirtualBox Hard Drive Location&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Congratulations! You now have a virtual machine set up for Ubuntu!&lt;/p&gt;

&lt;h1 id=&quot;installing-ubuntu&quot;&gt;Installing Ubuntu&lt;/h1&gt;

&lt;p&gt;Click Start to power on the machine.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://tutorialsbynick.com/images/virtualbox-main-window-with-ubuntu.jpg&quot; alt=&quot;VirtualBox Main Window with Ubuntu&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This window should pop up. Click on the folder icon to select the Ubuntu .iso file you downloaded earlier.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://tutorialsbynick.com/images/virtualbox-startup-disk.jpg&quot; alt=&quot;VirtualBox Startup Disk&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://tutorialsbynick.com/images/select-ubuntu-download.jpg&quot; alt=&quot;Select Ubuntu Download&quot; /&gt;&lt;/p&gt;

&lt;p&gt;When this screen comes up, it means that the virtual machine is booting successfully.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://tutorialsbynick.com/images/virtualbox-machine-starting.jpg&quot; alt=&quot;VirtualBox Machine Starting&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This screen means that Ubuntu has booted up successfully.&lt;/p&gt;

&lt;p&gt;If you want to just try Ubuntu, you can choose the try option. However, this guide will go over the installation of Ubuntu, so choose that option if you would like to continue and have Ubuntu persist when you reboot it.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://tutorialsbynick.com/images/virtualbox-ubuntu-started.jpg&quot; alt=&quot;Ubuntu Started&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Select these options if you want. Downloading updates now means that it takes longer to install, but you don’t have to update later. Third-party software isn’t necessarily open source (meaning all of the programming code is available for you to view and edit yourself), and can be poorly made. But, it is usually required for many drivers that are essential for using the computer.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://tutorialsbynick.com/images/ubuntu-first-step.png&quot; alt=&quot;Ubuntu First Step&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Even though this window says that the first option will erase the whole disk, it means the &lt;em&gt;virtual&lt;/em&gt; disk. So, you don’t need to worry about wiping all of your personal files. Select the first option unless you’d like to use another method yourself.&lt;/p&gt;

&lt;p&gt;Select Install &lt;code&gt;Now&lt;/code&gt; to start the process.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://tutorialsbynick.com/images/ubuntu-disk-options.png&quot; alt=&quot;Ubuntu Disk Options&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Click &lt;code&gt;Continue&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://tutorialsbynick.com/images/ubuntu-disk-verification.png&quot; alt=&quot;Ubuntu Disk Verification&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Select your location so that Ubuntu can accurately set the system clock.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://tutorialsbynick.com/images/ubuntu-timezone.png&quot; alt=&quot;Ubuntu Timezone&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Select your keyboard preference and language.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://tutorialsbynick.com/images/ubuntu-keyboard.png&quot; alt=&quot;Ubuntu Keyboard&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Set your account details to protect your virtual machine and give it a user account. Write this information down because you’ll need it later to log in after it reboots.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://tutorialsbynick.com/images/ubuntu-login.png&quot; alt=&quot;Ubuntu Login&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You should see this screen as Ubuntu installs and downloads files to your virtual machine’s hard drive.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://tutorialsbynick.com/images/ubuntu-installing.png&quot; alt=&quot;Ubuntu Installing&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Click &lt;code&gt;Restart&lt;/code&gt; to finish installing Ubuntu.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://tutorialsbynick.com/images/ubuntu-restart.png&quot; alt=&quot;Ubuntu Restart&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If this image comes up, you’ll have to reset the virtual machine manually.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://tutorialsbynick.com/images/ubuntu-hang.png&quot; alt=&quot;Ubuntu Hang&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Click &lt;code&gt;Machine&lt;/code&gt;, then &lt;code&gt;Reset&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://tutorialsbynick.com/images/virtualbox-reset.jpg&quot; alt=&quot;VirtualBox Reset&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Confirm you want to reset.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://tutorialsbynick.com/images/virtualbox-reset-confirm.jpg&quot; alt=&quot;VirtualBox Reset Confirm&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now your Ubuntu machine should be up and running!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://tutorialsbynick.com/images/ubuntu-installed.png&quot; alt=&quot;Ubuntu Installed&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If your screen isn’t scaling right (see the scrollbars at the right and bottom), follow these steps. Otherwise, you’re ready to go!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://tutorialsbynick.com/images/virtualbox-ubuntu-screen-scale.jpg&quot; alt=&quot;VirtualBox Screen Scale&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Open up a terminal.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://tutorialsbynick.com/images/ubuntu-terminal.png&quot; alt=&quot;Ubuntu Terminal&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Type in &lt;code&gt;sudo apt-get install virtualbox-guest-dkms&lt;/code&gt; and hit &lt;code&gt;Enter&lt;/code&gt;. Then type in the password you made for your account earlier and it &lt;code&gt;Enter&lt;/code&gt;.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;sudo&lt;/code&gt; gives you root (administrator) privileges to install packages.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;apt-get&lt;/code&gt; installs programs from Ubuntu’s repositories.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;virtualbox-guest-dkms&lt;/code&gt; is the name of the program that gives your Ubuntu virtual machine the right methods to change the display.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;http://tutorialsbynick.com/images/ubuntu-virtualbox-guest-dkms.png&quot; alt=&quot;Ubuntu VirtualBox Guest DKMS&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Press &lt;code&gt;y&lt;/code&gt; and &lt;code&gt;Enter&lt;/code&gt; to confirm installation.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://tutorialsbynick.com/images/ubuntu-virtualbox-guest-dkms-y.png&quot; alt=&quot;Ubuntu VirtualBox Guest DKMS Y&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After this has finished installing, this will show up with a blinking cursor (with the settings you used for your user account).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://tutorialsbynick.com/images/ubuntu-dkms-installed.jpg&quot; alt=&quot;Ubuntu DKMS Finished&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Reboot to finish the changes.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://tutorialsbynick.com/images/ubuntu-reboot.png&quot; alt=&quot;Ubuntu Reboot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://tutorialsbynick.com/images/ubuntu-reboot-confirm.png&quot; alt=&quot;Ubuntu Reboot Confirm&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;setting-up-the-virtual-machine-to-handle-server-capabilities&quot;&gt;Setting up the virtual machine to handle server capabilities&lt;/h1&gt;

&lt;p&gt;If you want to use your virtual machine as a server or to develop web applications and server programs, you have to switch the virtual machine’s networking to bridged.&lt;/p&gt;

&lt;p&gt;First, go to the settings in VirtualBox&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://tutorialsbynick.com/images/virtualbox-settings.jpg&quot; alt=&quot;VirtualBox Settings&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Then, select the &lt;code&gt;Network&lt;/code&gt; option on the side and select &lt;code&gt;Bridged Adapter&lt;/code&gt; from the &lt;code&gt;Attached to:&lt;/code&gt; dropdown in the center.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://tutorialsbynick.com/images/virtualbox-network-bridged.jpg&quot; alt=&quot;VirtualBox Networking&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;Now you have a capable Linux virtual machine installed. You could learn how to program on it, run open source software, or learn how to do security testing. Those are just a few options of what you can do in this Ubuntu installation.&lt;/p&gt;

</description>
        <pubDate>Wed, 25 May 2016 00:00:00 -0400</pubDate>
        <link>http://tutorialsbynick.com/how-to-install-ubuntu-in-a-virtual-machine-on-windows/</link>
        <guid isPermaLink="true">http://tutorialsbynick.com/how-to-install-ubuntu-in-a-virtual-machine-on-windows/</guid>
        
        
      </item>
    
  </channel>
</rss>
